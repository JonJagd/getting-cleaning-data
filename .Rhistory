education <- read.csv("./data/educational.csv")
#head(gdp,10)
#head(education,10)
gdp <- gdp[gdp$X != "",] # fjerner rækker uden country code
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = TRUE) # merger de to data sets
mergedData[mergedData$Gross.domestic.product.2012 != "", c("X", "X.2", "Gross.domestic.product.2012", "X.3", "Short.Name")]
sum(!is.na(unique(mergedData$Gross.domestic.product.2012)))
gdp <- read.csv("./data/gross_domestic_product.csv" skip = 4, nrows = 215)
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
gdp
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
gdp <- gdp[gdp$X != "",] # fjerner rækker uden country code
gdp
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),] # fjerner rækker uden country code og uden ranking
gdp
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = TRUE) # merger de to data sets
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = FALSE) # merger de to data sets
mergedData[, c("X", "X.2", "Gross.domestic.product.2012", "X.3", "Short.Name")]
mergedData[, c("X", "X.1", "X.3", "Short.Name")]
sum(!is.na(unique(mergedData$X)))
sum(mergedData$X)
sum(unique(mergedData$X)
sum(unique(mergedData$X))
sum(unique(mergedData$X))
mergedData$X
unique(mergedData$X)
sum(unique(mergedData$X))
mergedData[, c("X", "X.1", "X.3", "Short.Name")]
summary(mergedData)
str(mergedData)
str(mergedData$X)
mergedData$X
mergedData[, c("X", "X.1", "X.3", "Short.Name")]
mergedData[order(X.1, decreasing = TRUE),]
mergedData[order("X.1", decreasing = TRUE),]
mergedData[order("X.1", decreasing = TRUE), c("X", "X.1", "X.3", "Short.Name")]
mergedData[order("X.1", decreasing = TRUE), c("X", "X.1", "X.3", "Short.Name")][13]
mergedData[order("X.1", decreasing = TRUE), c("X", "X.1", "X.3")]
mergedData[order("X.1", decreasing = TRUE), c("X", "X.1", "X.3")][13]
mergedData[order("X.1", decreasing = TRUE), list("X", "X.1", "X.3")][13]
mergedData[order("X.1", decreasing = TRUE), list(X, X.1, X.3)][13]
mergedData$GDPRank <- as.integer(mergedData$X.1)
mergedData$GDPRank
mergedData
mergedData$X.1
mergedData$GDPRank
mergedData <- arrange(mergedData, desc(mergedData$GDPRank))
library(dplyr)
mergedData <- arrange(mergedData, desc(mergedData$GDPRank))
mergedData$GDPRank <- as.integer(mergedData$X.1)
mergedData <- arrange(mergedData, desc(mergedData$GDPRank))
View(mergedData)
mergedData <- arrange(mergedData, desc(mergedData$X.1))
mergedData[, c("X", "X.2", "GDPRank", "X.3")] #
mergedData[, c("X", "X.1", "GDPRank", "X.3")] #
testingSort <- mergedData[sort(mergedData$GDPRank), ]
testingSort
testingSort[, c("X", "X.1", "GDPRank", "X.3")]
testingSort <- mergedData[sort(mergedData$GDPRank), ]
View(testingSort)
sort(mergedData$GDPRank)
mergedData[sort(mergedData$GDPRank), ]
testingSort <- mergedData[sort(mergedData$GDPRank), ]
View(testingSort)
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),] # fjerner rækker uden country code og uden ranking
education <- read.csv("./data/educational.csv")
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = FALSE) # merger de to data sets
mergedData$GDPRank <- as.integer(mergedData$X.1)
View(mergedData)
mergedData[, c("X", "X.1", "GDPRank", "X.3")] #
testingSort <- mergedData[sort(mergedData$GDPRank), ]
testingSort[, c("X", "X.1", "GDPRank", "X.3")]
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),] # fjerner rækker uden country code og uden ranking
education <- read.csv("./data/educational.csv")
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = FALSE) # merger de to data sets
mergedData[, c("X", "X.1", "X.3", "Short.Name")]
sum(!is.na(unique(mergedData$X)))
# [1] 189
mergedData <- arrange(mergedData, desc(mergedData$X.1))
library(dplyr)
mergedData <- arrange(mergedData, desc(mergedData$X.1))
testingSort <- mergedData[order(mergedData$GDPRank), ]
order(mergedData$GDPRank)
mergedData$GDPRank
mergedData$GDPRank <- as.integer(mergedData$X.1)
mergedData$GDPRank
mergedData[, c("X", "X.1", "GDPRank", "X.3")] #
order(mergedData$GDPRank)
testingSort <- mergedData[order(mergedData$GDPRank), ]
testingSort[, c("X", "X.1", "GDPRank", "X.3")]
testingSort <- mergedData[order(-mergedData$GDPRank), ]
testingSort[, c("X", "X.1", "GDPRank", "X.3")]
testingSort[, c("X", "X.1", "GDPRank", "X.3")][13]
testingSort[13, c("X", "X.1", "GDPRank", "X.3")]
View(testingSort)
View(gdp)
View(education)
mean(mergedData$X.1)
mergedData$X.1
oecdGroups <- group_by(mergedData, Income.Group)
oecdGroups
summarize(mergedData, X.1 = mean(X.1, na.rm = TRUE))
summarize(mergedData, X.1 = mean(X.1, na.rm = TRUE))
summarize(mergedData, X.1 = mean(X.1, na.rm = TRUE), Income.Group)
if (!file.exists("data")) {dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
toupper(names(cameraData))
tolower(names(cameraData)) # alle bogstaver i titlerne konverteres til lower case
splNames = strsplit(names(cameraData), "\\.")
splitNames = strsplit(names(cameraData), "\\.")
splitNames
class(splitNames)
splitNames = strsplit(names(cameraData), "\.")
splitNames = strsplit(names(cameraData), "\\.")
splitNames[1,]
splitNames[[1]]
splitNames[[5]]
splitNames[[6]]
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(mylist)
mylist[1]
$letters
mylist$letters
mylist[1]
mylist[[1]]
splitNames[[6]]
splitNames[[6]][1]
splitNames[[6]][2]
firstElement <- function(x){x[1]} # vi laver en funktion der tager det første element i en liste
sapply(splitNames, firstElement) # for hver element i listen udtager vi det første element
reviews = read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
sub("_","",names(reviews),)
sub("_","",names(reviews))
sub("_","",testName)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName) #
grep("Alameda",cameraData$intersection)
table(grepl("Alameda",cameraData$intersection))
cameraData[!grepl("Alameda",cameraData$intersection)]
cameraData[!grepl("Alameda",cameraData$intersection),]
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]
cameraData2
grep("Alemeda",cameraData$intersection,value=TRUE)
grep("Alameda",cameraData$intersection,value=TRUE)
grep("Alemeda",cameraData$intersection,value=TRUE)
grep("Alemeda",cameraData$intersection,value=TRUE)
grep("Alameda",cameraData$intersection,value=TRUE)
length(grep("JeffStreet",cameraData$intersection))
library(stringr)
nchar("Jon Jagd CHristensen")
substr("Jon Jagd Christensen",1,7)
paste("Jon", "Jagd", "Christensen")
paste0("Jon", "Jagd", "Christensen")
str_trim("Jon       ")
str_trim("   Jon       ")
If(!file.exist("./data")){dir.create("./data")}
if(!file.exist("./data")){dir.create("./data")}
if(!file.exists("./data")){dir.create("./data")}
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="./data/housing_idaho.csv", mode = "wb")
housingIdaho = read.csv("./data/housing_idaho.csv")
housingIdaho = read.csv("./data/housing_idaho.csv")
head(housingIdaho)
?strsplit()
names(housingIdaho)
strsplit(names(housingIdaho), "wgtp")
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1,destfile="./data/gross_domestic_product.csv", mode = "wb")
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
head(gdp)
names(gdp)
library(dplyr)
gdp <- rename(gdp, X = CountryCode, X.1 = Rank)
head(gdp)
gdp <- rename(gdp, CountryCode = X, Rank = X.1)
head(gdp)
gdp <- rename(gdp, CountryCode = X, Rank = X.1, Economy = X.3, US dollars = X.4)
head(gdp)
gdp <- rename(gdp, CountryCode = X, Rank = X.1, Economy = X.3, USdollars = X.4)
head(gdp)
gdp <- rename(gdp, Economy = X.3, USdollars = X.4)
head(gdp)
names(gdp)
colMeans(gdp)
colMeans(gdp$USdollars)
colMeans(gdp[,gdp$USdollars])
gdp[,gdp$USdollars]
gdp[,gdp$USdollars]
gdp$USdollars
gdp[,gdp$USdollars]
gdp[,c("USdollars")]
colMeans(gdp[,c("USdollars")])
?colMeans
gdp
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),] # fjerner rækker uden country code og uden ranking
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
names(gdp)
# Jeg omdøber nogle af kolonnenavnene
library(dplyr)
gdp <- rename(gdp, CountryCode = X, Rank = X.1, Economy = X.3, USdollars = X.4)
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),] # fjerner rækker uden country code og uden ranking
gdp <- read.csv("./data/gross_domestic_product.csv", skip = 4, nrows = 215)
names(gdp)
# Jeg omdøber nogle af kolonnenavnene
library(dplyr)
#gdp <- rename(gdp, CountryCode = X, Rank = X.1, Economy = X.3, USdollars = X.4)
gdp <- gdp[gdp$X != "" & !is.na(gdp$X.1),]
gdp
colMeans(gdp[,gdp$X.4])
gdp[,gdp$X.4]
gdp[,c("X.4")]
colMeans(gdp[,c("X.4")])
typeof(gdp$X.4)
mean(gdp[,c("X.4")])
mean(as.integer(gdp[,c("X.4")]))
gdp$X.4
gsub(",","",gdp$X.4)
mean(as.integer(gsub(",","",gdp$X.4)))
typeof(gdp$X.4)
gdp$X.4
mean(as.integer(gsub(",","",gdp$X.4)))
names(gdp)
head(gdp)
grep("^United", X.3)
grep("^United", gdp$X.3)
gdp$X.3
countryNames <- gdp$X.3
countryNames
class(countryNames)
grep("^United", countryNames)
united <- grep("^United", countryNames)
united
?grep
united <- grepl("^United", countryNames)
united
united <- grep("^United", countryNames)
united
rowSums(united)
length(grep("^United", countryNames))
length(grep("United$", countryNames))
length(grep("*United", countryNames))
education <- read.csv("./data/educational.csv")
education
mergedData = merge(gdp,education,by.x = "X",by.y="CountryCode",all = FALSE) # merger de to data sets
mergedData[, c("X", "X.1", "X.3", "Short.Name")]
head(housingIdaho)
head(mergedData)
grep("^Fiscal year end: June", mergedData$Special.Notes)
length(grep("^Fiscal year end: June", mergedData$Special.Notes))
grep("^Fiscal year end: June", mergedData$Special.Notes)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
sampleTimes = index(amzn)
sampleTimes
head(sampleTimes)
grep("^2012", sampleTimes)
len(grep("^2012", sampleTimes))
length(grep("^2012", sampleTimes))
weekdays(sampleTimes)
length(grep("monday", weekdays(sampleTimes)))
length(grep("mandag", weekdays(sampleTimes)))
grep("mandag", weekdays(sampleTimes))
grep("mandag", weekdays(grep("^2012", sampleTimes)))
grep("mandag", weekdays(grep("^2012", sampleTimes)))
2012Times <- grep("^2012", sampleTimes)
grep("^2012", sampleTimes)
times2012 <- grep("^2012", sampleTimes)
times2012
sampleTimes
sampleTimes[grep("^2012", sampleTimes),]
sampleTimesDF <- as.data.frame(sampleTimes)
sampleTimes
sampleTimesDF
times2012 <- sampleTimesDF[grep("^2012", sampleTimesDF),]
times2012
sampleTimesDF[grep("^2012", sampleTimesDF),]
grep("^2012", sampleTimesDF)
grep("^2012", sampleTimes)
sampleTimesDF
sampleTimesDF[grep("^2012", sampleTimesDF),]
sampleTimesDF["^2012",]
sampleTimesDF[sampleTimesDF$sampleTimes == "^2012",]
cameraData2
grep("^2012", sampleTimes, value = TRUE)
weekdays(grep("^2012", sampleTimes, value = TRUE))
times2012 = grep("^2012", sampleTimes, value = TRUE)
times2012
grep("mandag", weekdays(times2012))
weekdays(times2012)
times2012
weekdays(times2012)
weekdays(times2012)
weekdays(sampleTimes)
weekdays(as.Date(times2012))
weekdays(as.Date(times2012))
grep("mandag", weekdays(as.Date(times2012)))
length(grep("mandag", weekdays(as.Date(times2012))))
length(grep("mandag", weekdays(as.Date(grep("^2012", sampleTimes, value = TRUE)))))
length(grep("mandag", weekdays(as.Date(grep("^2012", sampleTimes, value = TRUE)))))
# 1. Merges the training and the test sets to create one data set.
library(plyr)
#library(dplyr)
###### TEST DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_test <- read.csv("./test/subject_test.txt", sep = " ", header = FALSE)
subject_test <- rename(subject_test, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_test <- read.csv("./test/y_test.txt", sep = " ", header = FALSE)
activity_test <- rename(activity_test, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_test <- read.table("./test/X_test.txt")
features <- read.csv("./features.txt", sep = " ", header = FALSE)
names(acc_data_test) <- features$V2
# Combine all the testdata files into one data frame
all_test_data <- cbind.data.frame(subject_test, activity_test, acc_data_test)
###### TRAINING DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_train <- read.csv("./train/subject_train.txt", sep = " ", header = FALSE)
subject_train <- rename(subject_train, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_train <- read.csv("./train/y_train.txt", sep = " ", header = FALSE)
activity_train <- rename(activity_train, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_train <- read.table("./train/X_train.txt")
names(acc_data_train) <- features$V2
# Combine the all the train data files into one data frame
all_train_data <- cbind.data.frame(subject_train, activity_train, acc_data_train)
###### TEST & TRAINING DATA COMBINED #####
all_data <- rbind(all_test_data, all_train_data)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Due to the formulation of the assignment I will limit my extraction to the variables
# indicating the use of specifially the Mean()-function
# and exclude the MeanFreq() and the gravityMean
meanMeasurements <- all_data[, c("subject", "activity", grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", features$V2, value = TRUE))]
# 3. Uses descriptive activity names to name the activities in the data set
# Read the file with the descriptive activity labels from activity_labels.txt and change the variable names
descr_act_names <- read.csv("./activity_labels.txt", sep = " ", header = FALSE)
descr_act_names <- rename(descr_act_names, activity = V1, activityname = V2)
# I merge the complete datafile with all the mean and std variables with the activity label file
# to get a new column with the activity label
meanMeasurements <- merge(meanMeasurements, descr_act_names, by.x = "activity", by.y = "activity")
# 4. Appropriately labels the data set with descriptive variable names.
# I already labelled the variables in step 1 in order to easily extract the std and mean columns of the dataset in step 2
# In week 4 in the course the following guidelines were given regarding naming variables
# 1. All lower case when possible
# 2. Descriptive names
# 3. Not duplicated
# 4. Not have underscores or dots or white spaces
# I check for underscores or dots or white spaces in the variable names
length(grep("_|\\.| ", names(meanMeasurements), value = TRUE))
# [1] 0
# Following the above guidelines the only obvious change to make to the variable names given from features.txt
# is to convert them to all lower cases
meanMeasurementsToLower <- meanMeasurements
names(meanMeasurementsToLower) <- tolower(names(meanMeasurementsToLower))
# 5. From the data set in step 4, creates a second, independent tidy data
#    set with the average of each variable for each activity and each subject.
#library(plyr)
# I specify the grouping columns and include both the activity id and the activity name for clarity
groupColumns <- c("subject", "activity", "activityname")
# I use the same grep-function as previously to specify the std- and mean-columns
dataColumns <- grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", names(meanMeasurementsToLower), value = TRUE)
# I use the ddply-function to specify the grouping variables, the data columns and the function to apply on the data columns
groupsMeasurementsAvg <- ddply(meanMeasurementsToLower, groupColumns, function(x) colMeans(x[dataColumns]))
head(groupsMeasurementsAvg, 10)
write.table(groupsMeasurementsAvg, file = "./mysubmissionWeek4GettigCleaningData.txt", row.names = FALSE, quote = FALSE)
# 1. Merges the training and the test sets to create one data set.
library(dplyr)
###### TEST DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_test <- read.csv("./test/subject_test.txt", sep = " ", header = FALSE)
subject_test <- rename(subject_test, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_test <- read.csv("./test/y_test.txt", sep = " ", header = FALSE)
activity_test <- rename(activity_test, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_test <- read.table("./test/X_test.txt")
features <- read.csv("./features.txt", sep = " ", header = FALSE)
names(acc_data_test) <- features$V2
# Combine all the testdata files into one data frame
all_test_data <- cbind.data.frame(subject_test, activity_test, acc_data_test)
###### TRAINING DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_train <- read.csv("./train/subject_train.txt", sep = " ", header = FALSE)
subject_train <- rename(subject_train, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_train <- read.csv("./train/y_train.txt", sep = " ", header = FALSE)
activity_train <- rename(activity_train, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_train <- read.table("./train/X_train.txt")
names(acc_data_train) <- features$V2
# Combine the all the train data files into one data frame
all_train_data <- cbind.data.frame(subject_train, activity_train, acc_data_train)
###### TEST & TRAINING DATA COMBINED #####
all_data <- rbind(all_test_data, all_train_data)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Due to the formulation of the assignment I will limit my extraction to the variables
# indicating the use of specifially the Mean()-function
# and exclude the MeanFreq() and the gravityMean
meanMeasurements <- all_data[, c("subject", "activity", grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", features$V2, value = TRUE))]
# 3. Uses descriptive activity names to name the activities in the data set
# Read the file with the descriptive activity labels from activity_labels.txt and change the variable names
descr_act_names <- read.csv("./activity_labels.txt", sep = " ", header = FALSE)
descr_act_names <- rename(descr_act_names, activity = V1, activityname = V2)
# I merge the complete datafile with all the mean and std variables with the activity label file
# to get a new column with the activity label
meanMeasurements <- merge(meanMeasurements, descr_act_names, by.x = "activity", by.y = "activity")
# 4. Appropriately labels the data set with descriptive variable names.
# I already labelled the variables in step 1 in order to easily extract the std and mean columns of the dataset in step 2
# In week 4 in the course the following guidelines were given regarding naming variables
# 1. All lower case when possible
# 2. Descriptive names
# 3. Not duplicated
# 4. Not have underscores or dots or white spaces
# I check for underscores or dots or white spaces in the variable names
length(grep("_|\\.| ", names(meanMeasurements), value = TRUE))
# [1] 0
# Following the above guidelines the only obvious change to make to the variable names given from features.txt
# is to convert them to all lower cases
meanMeasurementsToLower <- meanMeasurements
names(meanMeasurementsToLower) <- tolower(names(meanMeasurementsToLower))
# 5. From the data set in step 4, creates a second, independent tidy data
#    set with the average of each variable for each activity and each subject.
library(plyr)
# I specify the grouping columns and include both the activity id and the activity name for clarity
groupColumns <- c("subject", "activity", "activityname")
# I use the same grep-function as previously to specify the std- and mean-columns
dataColumns <- grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", names(meanMeasurementsToLower), value = TRUE)
# I use the ddply-function to specify the grouping variables, the data columns and the function to apply on the data columns
groupsMeasurementsAvg <- ddply(meanMeasurementsToLower, groupColumns, function(x) colMeans(x[dataColumns]))
head(groupsMeasurementsAvg, 10)
write.table(groupsMeasurementsAvg, file = "./mysubmissionWeek4GettigCleaningData.txt", row.names = FALSE, quote = FALSE)
# 1. Merges the training and the test sets to create one data set.
library(dplyr)
###### TEST DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_test <- read.csv("./test/subject_test.txt", sep = " ", header = FALSE)
subject_test <- rename(subject_test, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_test <- read.csv("./test/y_test.txt", sep = " ", header = FALSE)
activity_test <- rename(activity_test, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_test <- read.table("./test/X_test.txt")
features <- read.csv("./features.txt", sep = " ", header = FALSE)
names(acc_data_test) <- features$V2
# Combine all the testdata files into one data frame
all_test_data <- cbind.data.frame(subject_test, activity_test, acc_data_test)
###### TRAINING DATA #####
# Read the file with subjects and give it the variable name "subject"
subject_train <- read.csv("./train/subject_train.txt", sep = " ", header = FALSE)
subject_train <- rename(subject_train, subject = V1)
# Read the file with activities and give it the variable name "activity"
activity_train <- read.csv("./train/y_train.txt", sep = " ", header = FALSE)
activity_train <- rename(activity_train, activity = V1)
# Read the file with all the accelerator data and change the variable names to the names from the features.txt file
acc_data_train <- read.table("./train/X_train.txt")
names(acc_data_train) <- features$V2
# Combine the all the train data files into one data frame
all_train_data <- cbind.data.frame(subject_train, activity_train, acc_data_train)
###### TEST & TRAINING DATA COMBINED #####
all_data <- rbind(all_test_data, all_train_data)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Due to the formulation of the assignment I will limit my extraction to the variables
# indicating the use of specifially the Mean()-function
# and exclude the MeanFreq() and the gravityMean
meanMeasurements <- all_data[, c("subject", "activity", grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", features$V2, value = TRUE))]
# 3. Uses descriptive activity names to name the activities in the data set
# Read the file with the descriptive activity labels from activity_labels.txt and change the variable names
descr_act_names <- read.csv("./activity_labels.txt", sep = " ", header = FALSE)
descr_act_names <- rename(descr_act_names, activity = V1, activityname = V2)
# I merge the complete datafile with all the mean and std variables with the activity label file
# to get a new column with the activity label
meanMeasurements <- merge(meanMeasurements, descr_act_names, by.x = "activity", by.y = "activity")
# 4. Appropriately labels the data set with descriptive variable names.
# I already labelled the variables in step 1 in order to easily extract the std and mean columns of the dataset in step 2
# In week 4 in the course the following guidelines were given regarding naming variables
# 1. All lower case when possible
# 2. Descriptive names
# 3. Not duplicated
# 4. Not have underscores or dots or white spaces
# I check for underscores or dots or white spaces in the variable names
length(grep("_|\\.| ", names(meanMeasurements), value = TRUE))
# [1] 0
# Following the above guidelines the only obvious change to make to the variable names given from features.txt
# is to convert them to all lower cases
meanMeasurementsToLower <- meanMeasurements
names(meanMeasurementsToLower) <- tolower(names(meanMeasurementsToLower))
# 5. From the data set in step 4, creates a second, independent tidy data
#    set with the average of each variable for each activity and each subject.
library(plyr)
# I specify the grouping columns and include both the activity id and the activity name for clarity
groupColumns <- c("subject", "activity", "activityname")
# I use the same grep-function as previously to specify the std- and mean-columns
dataColumns <- grep("[Mm]ean\\(\\)|[Ss]td\\(\\)", names(meanMeasurementsToLower), value = TRUE)
# I use the ddply-function to specify the grouping variables, the data columns and the function to apply on the data columns
groupsMeasurementsAvg <- ddply(meanMeasurementsToLower, groupColumns, function(x) colMeans(x[dataColumns]))
head(groupsMeasurementsAvg, 10)
write.table(groupsMeasurementsAvg, file = "./mysubmissionWeek4GettigCleaningData.txt", row.names = FALSE, quote = FALSE)
